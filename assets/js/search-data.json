{
  
    
        "post0": {
            "title": "Request Roll damping API",
            "content": "#collapse import requests import numpy as np import pandas as pd import matplotlib.pyplot as plt #plt.style.use(&#39;dark_background&#39;) from collections import OrderedDict from rolldecayestimators.polynom_estimator import Polynom . . Simple request . The API uses the following mathematical model: . #collapse url = r&#39;http://marale.pythonanywhere.com/api/roll_damping&#39; request = url + r&#39;?lpp=100&amp;beam=10&amp;T=2&amp;BK_L=0&amp;BK_B=0&amp;OG=0&amp;omega0_hat=0.1&amp;C_b=0.7&amp;A_0=0.97&amp;V=10&amp;phi_a=0.1&#39; r = requests.get(request) assert r.status_code is 200 result = r.json() . . result . {&#39;A_0&#39;: 0.97, &#39;BK_B&#39;: 0.0, &#39;BK_L&#39;: 0.0, &#39;B_e_hat&#39;: 0.001010855968957833, &#39;C_b&#39;: 0.7, &#39;OG&#39;: 0.0, &#39;T&#39;: 2.0, &#39;V&#39;: 10.0, &#39;beam&#39;: 10.0, &#39;lpp&#39;: 100.0, &#39;method&#39;: &#39;/home/marale/REST_API_roll_damping/static/models/polynom_complex.sym&#39;, &#39;omega0_hat&#39;: 0.1, &#39;phi_a&#39;: 0.1} . result[&#39;B_e_hat&#39;] . 0.001010855968957833 . #collapse def get_rolldamping(row): r = requests.get(url, params=dict(row)) assert r.status_code is 200 result = r.json() result_ = pd.Series(result, name=row.name) return result_ . . #collapse N=10 index = np.arange(0,N) inputs = pd.DataFrame(index=index) inputs[&#39;lpp&#39;]=100 inputs[&#39;beam&#39;]=10 inputs[&#39;T&#39;]=2 inputs[&#39;BK_L&#39;]=0 inputs[&#39;BK_B&#39;]=0 inputs[&#39;OG&#39;]=0 inputs[&#39;omega0_hat&#39;]=0.5 inputs[&#39;C_b&#39;]=0.8 inputs[&#39;A_0&#39;]=0.96 inputs[&#39;V&#39;]=np.linspace(0,10,N) inputs[&#39;phi_a&#39;]=np.deg2rad(3) result = inputs.apply(func=get_rolldamping, axis=1) result.head() . . A_0 BK_B BK_L B_e_hat C_b OG T V beam lpp method omega0_hat phi_a . 0 0.96 | 0.0 | 0.0 | 0.005706 | 0.8 | 0.0 | 2.0 | 0.000000 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 1 0.96 | 0.0 | 0.0 | 0.005286 | 0.8 | 0.0 | 2.0 | 1.111111 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 2 0.96 | 0.0 | 0.0 | 0.004964 | 0.8 | 0.0 | 2.0 | 2.222222 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 3 0.96 | 0.0 | 0.0 | 0.004740 | 0.8 | 0.0 | 2.0 | 3.333333 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 4 0.96 | 0.0 | 0.0 | 0.004615 | 0.8 | 0.0 | 2.0 | 4.444444 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . fig,ax=plt.subplots() result.plot(x=&#39;V&#39;,y=&#39;B_e_hat&#39;, ax=ax) . &lt;AxesSubplot:xlabel=&#39;V&#39;&gt; . inputs2 = inputs.copy() inputs2[&#39;V&#39;]=5 inputs2[&#39;phi_a&#39;]=np.deg2rad(np.linspace(0,10,N)) result2 = inputs2.apply(func=get_rolldamping, axis=1) fig,ax=plt.subplots() result2.plot(x=&#39;phi_a&#39;,y=&#39;B_e_hat&#39;, ax=ax); . Using POST instead . ...to request roll damping for many ships in one single request . #collapse def get_rolldampings(inputs): input_list = [record for record in inputs.to_dict(&#39;records&#39;)] response = requests.post(url=url, json=input_list) outputs = response.json() outputs result = pd.DataFrame(outputs) return result . . result3 = get_rolldampings(inputs=inputs) fig,ax=plt.subplots() result3.plot(x=&#39;V&#39;,y=&#39;B_e_hat&#39;, ax=ax); . Playing with the API . X=polynom.X X.head() . beam T BK_L BK_B OG omega0_hat C_b A_0 V phi_a . 0 0.157706 | 0.033692 | 0.238387 | 0.001577 | -0.010466 | 0.730187 | 0.738415 | 0.9906 | 0.615980 | 0.0 | . 1 0.165387 | 0.040493 | 0.324401 | 0.001514 | -0.024225 | 0.518472 | 0.759250 | 0.9899 | 0.396847 | 0.0 | . 2 0.159028 | 0.039931 | 0.314410 | 0.001389 | -0.020486 | 0.517297 | 0.752774 | 0.9900 | 0.003031 | 0.0 | . 3 0.263112 | 0.092057 | 0.000000 | 0.000000 | -0.016512 | 0.468145 | 0.760157 | 0.9940 | 0.000000 | 0.0 | . 4 0.159028 | 0.039931 | 0.314410 | 0.001389 | -0.020486 | 0.513234 | 0.752774 | 0.9900 | 0.424395 | 0.0 | . #collapse input_ranges = OrderedDict() input_parameters=[ &#39;beam&#39;, &#39;T&#39;, &#39;BK_L&#39;, &#39;BK_B&#39;, &#39;OG&#39;, &#39;omega0_hat&#39;, &#39;C_b&#39;, &#39;A_0&#39;, &#39;V&#39;, &#39;phi_a&#39; ] for input_parameter in input_parameters: x=X[input_parameter] input_ranges[input_parameter]=(x.min(),x.max()) mean_ship = pd.Series() for parameter, limits in input_ranges.items(): mean_ship[parameter]=np.mean(limits) mean_ship[&#39;lpp&#39;]=1 N=10 df_results=pd.DataFrame() axes = [] for parameter, limits in input_ranges.items(): repeats = np.tile(mean_ship, (N,1)) df = pd.DataFrame(repeats, columns=mean_ship.index) df[parameter] = np.linspace(limits[0],limits[1],N) result4 = get_rolldampings(inputs=df) df_results=df_results.append(result4, ignore_index=True) fig,ax=plt.subplots() axes.append(ax) result4.plot(x=parameter, y=&#39;B_e_hat&#39;, ax=ax) for ax in axes: ax.set_ylim(df_results[&#39;B_e_hat&#39;].min(), df_results[&#39;B_e_hat&#39;].max()) . .",
            "url": "https://martinlarsalbert.github.io/blog/2020/08/03/01_request_API.html",
            "relUrl": "/2020/08/03/01_request_API.html",
            "date": " • Aug 3, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Naval Architect degree from KTH in 2009. | Works at: SSPA | Industrial PHD at Chalmers since 2020. | .",
          "url": "https://martinlarsalbert.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://martinlarsalbert.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}