{
  
    
        "post0": {
            "title": "Request Roll damping API",
            "content": "%matplotlib.notebook . UsageError: Line magic function `%matplotlib.notebook` not found. . import requests import numpy as np import pandas as pd import matplotlib.pyplot as plt plt.style.use(&#39;dark_background&#39;) from collections import OrderedDict from rolldecayestimators.polynom_estimator import Polynom . Simple request . The API uses the following mathematical model: . file_path = &#39;../../static/models/polynom_complex.sym&#39; polynom = Polynom.load(file_path=file_path) polynom.equation . /Users/martinalexandersson/Dev/REST_API_roll_damping/venv/lib/python3.6/site-packages/sklearn/base.py:334: UserWarning: Trying to unpickle estimator VarianceThreshold from version 0.22.1 when using version 0.23.1. This might lead to breaking code or invalid results. Use at your own risk. UserWarning) /Users/martinalexandersson/Dev/REST_API_roll_damping/venv/lib/python3.6/site-packages/sklearn/base.py:334: UserWarning: Trying to unpickle estimator SelectKBest from version 0.22.1 when using version 0.23.1. This might lead to breaking code or invalid results. Use at your own risk. UserWarning) /Users/martinalexandersson/Dev/REST_API_roll_damping/venv/lib/python3.6/site-packages/sklearn/base.py:334: UserWarning: Trying to unpickle estimator LinearRegression from version 0.22.1 when using version 0.23.1. This might lead to breaking code or invalid results. Use at your own risk. UserWarning) /Users/martinalexandersson/Dev/REST_API_roll_damping/venv/lib/python3.6/site-packages/sklearn/base.py:334: UserWarning: Trying to unpickle estimator PolynomialFeatures from version 0.22.1 when using version 0.23.1. This might lead to breaking code or invalid results. Use at your own risk. UserWarning) . $ displaystyle B_{e hat} = - 0.474343142842916 A_{0} T + 0.00289074271647827 A_{0} V - 0.26600587772494 BK_{B} V + 0.00724349765879581 BK_{L} V - 0.0257307741110084 C_{b} V - 0.107728741505611 OG V + 0.40260212807022 T + 0.00398479214192526 V^{2} + 0.0434721353199576 V beam + 0.0222693068947934 V omega_{0 hat} + 0.0408378844835377 V phi_{a} - 0.0040354044418498 V + 0.00676127145152363$ url = r&#39;http://marale.pythonanywhere.com/api/roll_damping&#39; request = url + r&#39;?lpp=100&amp;beam=10&amp;T=2&amp;BK_L=0&amp;BK_B=0&amp;OG=0&amp;omega0_hat=0.1&amp;C_b=0.7&amp;A_0=0.97&amp;V=10&amp;phi_a=0.1&#39; r = requests.get(request) assert r.status_code is 200 result = r.json() . result . {&#39;A_0&#39;: 0.97, &#39;BK_B&#39;: 0.0, &#39;BK_L&#39;: 0.0, &#39;B_e_hat&#39;: 0.001010855968957833, &#39;C_b&#39;: 0.7, &#39;OG&#39;: 0.0, &#39;T&#39;: 2.0, &#39;V&#39;: 10.0, &#39;beam&#39;: 10.0, &#39;lpp&#39;: 100.0, &#39;method&#39;: &#39;/home/marale/REST_API_roll_damping/static/models/polynom_complex.sym&#39;, &#39;omega0_hat&#39;: 0.1, &#39;phi_a&#39;: 0.1} . result[&#39;B_e_hat&#39;] . 0.001010855968957833 . def get_rolldamping(row): r = requests.get(url, params=dict(row)) assert r.status_code is 200 result = r.json() result_ = pd.Series(result, name=row.name) return result_ . N=10 index = np.arange(0,N) inputs = pd.DataFrame(index=index) inputs[&#39;lpp&#39;]=100 inputs[&#39;beam&#39;]=10 inputs[&#39;T&#39;]=2 inputs[&#39;BK_L&#39;]=0 inputs[&#39;BK_B&#39;]=0 inputs[&#39;OG&#39;]=0 inputs[&#39;omega0_hat&#39;]=0.5 inputs[&#39;C_b&#39;]=0.8 inputs[&#39;A_0&#39;]=0.96 inputs[&#39;V&#39;]=np.linspace(0,10,N) inputs[&#39;phi_a&#39;]=np.deg2rad(3) result = inputs.apply(func=get_rolldamping, axis=1) result.head() . A_0 BK_B BK_L B_e_hat C_b OG T V beam lpp method omega0_hat phi_a . 0 0.96 | 0.0 | 0.0 | 0.005706 | 0.8 | 0.0 | 2.0 | 0.000000 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 1 0.96 | 0.0 | 0.0 | 0.005286 | 0.8 | 0.0 | 2.0 | 1.111111 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 2 0.96 | 0.0 | 0.0 | 0.004964 | 0.8 | 0.0 | 2.0 | 2.222222 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 3 0.96 | 0.0 | 0.0 | 0.004740 | 0.8 | 0.0 | 2.0 | 3.333333 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . 4 0.96 | 0.0 | 0.0 | 0.004615 | 0.8 | 0.0 | 2.0 | 4.444444 | 10.0 | 100.0 | /home/marale/REST_API_roll_damping/static/mode... | 0.5 | 0.05236 | . fig,ax=plt.subplots() result.plot(x=&#39;V&#39;,y=&#39;B_e_hat&#39;, ax=ax) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x13161c278&gt; . inputs2 = inputs.copy() inputs2[&#39;V&#39;]=5 inputs2[&#39;phi_a&#39;]=np.deg2rad(np.linspace(0,10,N)) result2 = inputs2.apply(func=get_rolldamping, axis=1) fig,ax=plt.subplots() result2.plot(x=&#39;phi_a&#39;,y=&#39;B_e_hat&#39;, ax=ax) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1128bccf8&gt; . Using POST instead . ...to request roll damping for many ships in one single request . def get_rolldampings(inputs): input_list = [record for record in inputs.to_dict(&#39;records&#39;)] response = requests.post(url=url, json=input_list) outputs = response.json() outputs result = pd.DataFrame(outputs) return result . result3 = get_rolldampings(inputs=inputs) fig,ax=plt.subplots() result3.plot(x=&#39;V&#39;,y=&#39;B_e_hat&#39;, ax=ax) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1321dd208&gt; . Playing with the API . X=polynom.X X.head() . beam T BK_L BK_B OG omega0_hat C_b A_0 V phi_a . 0 0.157706 | 0.033692 | 0.238387 | 0.001577 | -0.010466 | 0.730187 | 0.738415 | 0.9906 | 0.615980 | 0.0 | . 1 0.165387 | 0.040493 | 0.324401 | 0.001514 | -0.024225 | 0.518472 | 0.759250 | 0.9899 | 0.396847 | 0.0 | . 2 0.159028 | 0.039931 | 0.314410 | 0.001389 | -0.020486 | 0.517297 | 0.752774 | 0.9900 | 0.003031 | 0.0 | . 3 0.263112 | 0.092057 | 0.000000 | 0.000000 | -0.016512 | 0.468145 | 0.760157 | 0.9940 | 0.000000 | 0.0 | . 4 0.159028 | 0.039931 | 0.314410 | 0.001389 | -0.020486 | 0.513234 | 0.752774 | 0.9900 | 0.424395 | 0.0 | . input_ranges = OrderedDict() input_parameters=[ &#39;beam&#39;, &#39;T&#39;, &#39;BK_L&#39;, &#39;BK_B&#39;, &#39;OG&#39;, &#39;omega0_hat&#39;, &#39;C_b&#39;, &#39;A_0&#39;, &#39;V&#39;, &#39;phi_a&#39; ] for input_parameter in input_parameters: x=X[input_parameter] input_ranges[input_parameter]=(x.min(),x.max()) mean_ship = pd.Series() for parameter, limits in input_ranges.items(): mean_ship[parameter]=np.mean(limits) mean_ship[&#39;lpp&#39;]=1 N=10 df_results=pd.DataFrame() axes = [] for parameter, limits in input_ranges.items(): repeats = np.tile(mean_ship, (N,1)) df = pd.DataFrame(repeats, columns=mean_ship.index) df[parameter] = np.linspace(limits[0],limits[1],N) result4 = get_rolldampings(inputs=df) df_results=df_results.append(result4, ignore_index=True) fig,ax=plt.subplots() axes.append(ax) result4.plot(x=parameter, y=&#39;B_e_hat&#39;, ax=ax) for ax in axes: ax.set_ylim(df_results[&#39;B_e_hat&#39;].min(), df_results[&#39;B_e_hat&#39;].max()) . /Users/martinalexandersson/Dev/REST_API_roll_damping/venv/lib/python3.6/site-packages/ipykernel_launcher.py:9: DeprecationWarning: The default dtype for empty Series will be &#39;object&#39; instead of &#39;float64&#39; in a future version. Specify a dtype explicitly to silence this warning. if __name__ == &#39;__main__&#39;: . .",
            "url": "https://martinlarsalbert.github.io/blog/2020/08/03/01_request_API.html",
            "relUrl": "/2020/08/03/01_request_API.html",
            "date": " • Aug 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://martinlarsalbert.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://martinlarsalbert.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Naval Architect degree from KTH in 2009. | Works at: SSPA | Industrial PHD at Chalmers since 2020. | .",
          "url": "https://martinlarsalbert.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://martinlarsalbert.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}